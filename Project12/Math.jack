// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        let n = 16;
        let powersOfTwo = Array.new(n);
        let powersOfTwo[0] = 1;
        let i = 1;
        while (i < n) {
            let powersOfTwo[i] = Math.multiply(powersOfTwo[i-1], 2);
            let i = i + 1;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
        var int sum, shiftedX,i;
        let sum = 0;
        let shiftedX = x;
        let i = 0;
        while(i < n) {
            if ((y, powersOfTwo[i]) != 0) {
                let sum=sum+shiftedX;
            }
            let shiftedX = Math.multiply(shiftedX, 2); 
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) {
        var int q, i,fneg;
        let fneg=false;
        if(x<0){
            let x=-x;
            let fneg=~neg;
        }
        if(y<0){
            let y=-y;
            let fneg=~neg;
        }
        let q = Math.divide(x, y*2);
        if (y = 0) {
            do Output.printString("Error: Division by zero\n");
            return 0;
        }
        if(y>x | y<0){
            return 0;
        }

        if((x-2*q*y)<y){
            if(fneg){
                return -2*q;
            }
            else{
                return 2*q;
            }
        }
        else{
            if(fneg){
                return -2*q+1;
            }
            else{
                return 2*q+1;
            }
        }
        
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y,j;
        let y=0;
        let j=n/2-1;
        while(j>=0){
            if(((y+powersOfTwo[j])*(y+powersOfTwo[j])<=x) & ((y+powersOfTwo[j])*(y+powersOfTwo[j]))>0){
                let y=y+powersOfTwo[j];
            }
        }
        return y;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
        if(a>b){
            return a;
        }
        else{
            return b;
        }
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
        if(a<b){
            return a;
        }
        else{
            return b;
        }
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x<0){
            return -x;
        }
        else{
            return x;
        }
    }
}
