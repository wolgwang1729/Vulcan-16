// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;        
    static Array powersOfTwo; 

    // Initializes the Math library.
    function void init() {
        var int i;
        let n = 16;
        let powersOfTwo = Array.new(n);
        let powersOfTwo[0] = 1;
        let i = 1;
        while (i < n) {
            let powersOfTwo[i] = powersOfTwo[i-1]+powersOfTwo[i-1];
            let i = i + 1;
        }
        return;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        
        let sum = 0;
        let shiftedX = x;
        let i = 0;
        while( i < n ) {  
            if(~((y & powersOfTwo[i]) = 0)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) {
        var int q,product;
        var boolean fneg;
        if (y = 0) {
            do Output.printString("Error: Division by zero\n");
            return 0;
        }
        let fneg = false;
        if (x < 0) {
            let x = -x;
            let fneg = ~fneg;
        }
        if (y < 0) {
            let y = -y;
            let fneg = ~fneg;
        }
        if(y>x){
            return 0;
        }

        let q=Math.divide(x,2*y);

        if((x-(2*q*y))<y){
            let product=2*q;
        }
        else{
            let product=2*q+1;
        }
        if(fneg){
            return -product;
        }
        else{
            return product;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y,j,currpow;
        let y=0;
        let j=(n/2)-1;
        while(j>-1){
            let currpow=powersOfTwo[j];
            if((((y+currpow)*(y+currpow)<x)|((y+currpow)*(y+currpow)=x))&(((y+currpow)*(y+currpow))>0)){
                let y=y+currpow;
            }
            let j=j-1;
        }
        return y;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
        if(a>b){
            return a;
        }
        else{
            return b;
        }
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
        if(a<b){
            return a;
        }
        else{
            return b;
        }
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x<0){
            return -x;
        }
        else{
            return x;
        }
    }
}
