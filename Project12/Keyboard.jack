// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack
/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
    static int keymap;
    /** Initializes the keyboard. */
    function void init() {
        let keymap = 24576;
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new str = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        var int key;
        let key = Memory.peek(keymap);
        return key;
    }

    /**	Waits until a key is pressed on the keyboard and released,
     *  then echoes the key to the screen, and returns the character 
     *  of the pressed key. */
    function char readChar() {
        var char key;
        while(Keyboard.keyPressed() = 0) {}
        let key = Keyboard.keyPressed();
        while(~(Keyboard.keyPressed() = 0)) {}
        do Output.printChar(key);
        return key;
    }

    /**	Displays the message on the screen, reads from the keyboard the entered
     *  text until a newline character is detected, echoes the text to the screen,
     *  and returns its value. Also handles user backspaces. */
    function String readLine(String message) {
        var String str;
        var char c;
        let str = String.new(100);
        do Output.printString(message);
        let c=Keyboard.readChar();
        while(~(c=String.newLine())) {
            if(c=String.backSpace()) {
                // Letting the error 18 String is empty to come up because if I handle it using loop then weird whitespaces occupy on the screen.
                // if(str.length()>0) {
                //     do str.eraseLastChar();
                //     do Output.backSpace();
                //     do Output.backSpace();
                // }
                do str.eraseLastChar();
                do Output.backSpace();
                do Output.backSpace();
            }
            else {
                do str.appendChar(c);
            }
            let c=Keyboard.readChar();
        }
        return str;
    }   

    /** Displays the message on the screen, reads from the keyboard the entered
     *  text until a newline character is detected, echoes the text to the screen,
     *  and returns its integer value (until the first non-digit character in the
     *  entered text is detected). Also handles user backspaces. */
    function int readInt(String message) {
        var String str;
        let str = Keyboard.readLine(message);
        return str.intValue();
    }
}
