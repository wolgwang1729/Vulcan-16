// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array powersOfTwo; 

    /** Initializes the Screen. */
    function void init() {
        var int i,n;
        let color = true;
        let n = 16;
        let powersOfTwo = Array.new(n);
        let powersOfTwo[0] = 1;
        let i = 1;
        while (i < n) {
            let powersOfTwo[i] = powersOfTwo[i-1]+powersOfTwo[i-1];
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i=16384;
        while(i<24576) {
            do Memory.poke(i,0);
            let i=i+1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address,value,modVal;
        
        let address = (32*y)+(x/16);
        let value = Memory.peek(16384+address);
        let modVal = (x-((x/16)*16));
        if(color) {
            let value = ((value)|(powersOfTwo[modVal]));
        }
        else {
            let value = ((value)&(~(powersOfTwo[modVal])));
        }
        do Memory.poke(16384+address,value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x,y,dx,dy,a,b,diff,signdx,signdy,temp;
        // Horizontal
        if(y1=y2) {
            if(x1>x2) {
                let temp=x1;
                let x1=x2;
                let x2=temp;
            }
            let x=x1;
            while(~(x>x2)) {
                do Screen.drawPixel(x,y1);
                let x=x+1;
            }
            return;
        }
        // Vertical
        if(x1=x2){
            if(y1>y2) {
                let temp=y1;
                let y1=y2;
                let y2=temp;
            }
            let y=y1;
            while(~(y>y2)) {
                do Screen.drawPixel(x1,y);
                let y=y+1;
            }
            return;
        }
        
        // Generalised line
        let dx = x2-x1;
        let dy = y2-y1;
        if(dx<0){
            let dx=-dx;
            let signdx=-1;
        }
        else {
            let signdx=1;
        }
        if(dy<0){
            let dy=-dy;
            let signdy=-1;
        }
        else {
            let signdy=1;
        }
        let x=x1;
        let y=y1;
        let a=0;
        let b=0;
        let diff=0;
        while((~(a>dx))&(~(b>dy))) {
            do Screen.drawPixel(x+(signdx*a),y+(signdy*b));
            if(diff<0){
                let a=a+1;
                let diff=diff+dy;
            }
            else {
                let b=b+1;
                let diff=diff-dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose bottom left corner is (x1, y1)
     *  and top right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int x,y;
        let y=y1;
        while(~(y>y2)){
            do Screen.drawLine(x1,y,x2,y);
            let y=y+1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy,dx;
        let r=Math.min(r,181);
        let dy=-r;

        while(~(dy>r)){
            let dx=Math.sqrt((r*r)-(dy*dy));
            do Screen.drawLine(x-dx,y+dy,x+dx,y+dy);
            let dy=dy+1;
        }
        return;
    }
}
