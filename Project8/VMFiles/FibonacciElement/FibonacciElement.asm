//BootstrapCode
@256
D=A
@SP
M=D

//call Sys.init
@Sys.init$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@0
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Sys.init$ret.0)

//function Main.fibonacci 0
(Main.fibonacci)
@0
D=A
(Main.fibonacci.LOOP)
@Main.fibonacci.END
D;JEQ
@SP
A=M
M=0
@SP
M=M+1
D=D-1
@Main.fibonacci.LOOP
0;JMP
(Main.fibonacci.END)

//push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1

//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1

//lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@TRUE.1
D;JLT
@SP
A=M
M=0
@SP
M=M+1
@CONTINUE.1
0;JMP
(TRUE.1)
@SP
A=M
M=-1
@SP
M=M+1
(CONTINUE.1)

//if-goto N_LT_2
@SP
M=M-1
A=M
D=M
@N_LT_2
D;JGT

//goto N_GE_2
@N_GE_2
0;JMP

//label N_LT_2
(N_LT_2)

//push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1

//return
@LCL
D=M
@endFrame.1
M=D
@5
A=D-A
D=M
@retAddrs.1
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@endFrame.1
M=M-1
A=M
D=M
@THAT
M=D
@endFrame.1
M=M-1
A=M
D=M
@THIS
M=D
@endFrame.1
M=M-1
A=M
D=M
@ARG
M=D
@endFrame.1
M=M-1
A=M
D=M
@LCL
M=D
@retAddrs.1
A=M
0;JMP

//label N_GE_2
(N_GE_2)

//push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1

//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1

//sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1

//call Main.fibonacci 1
@Main.fibonacci$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@1
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.1)

//push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1

//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1

//sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1

//call Main.fibonacci 1
@Main.fibonacci$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@1
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.2)

//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=D+M
@SP
M=M+1

//return
@LCL
D=M
@endFrame.2
M=D
@5
A=D-A
D=M
@retAddrs.2
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@endFrame.2
M=M-1
A=M
D=M
@THAT
M=D
@endFrame.2
M=M-1
A=M
D=M
@THIS
M=D
@endFrame.2
M=M-1
A=M
D=M
@ARG
M=D
@endFrame.2
M=M-1
A=M
D=M
@LCL
M=D
@retAddrs.2
A=M
0;JMP

//function Sys.init 0
(Sys.init)
@0
D=A
(Sys.init.LOOP)
@Sys.init.END
D;JEQ
@SP
A=M
M=0
@SP
M=M+1
D=D-1
@Sys.init.LOOP
0;JMP
(Sys.init.END)

//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1

//call Main.fibonacci 1
@Main.fibonacci$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@1
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.3)

//label END
(END)

//goto END
@END
0;JMP

