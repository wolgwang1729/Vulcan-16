// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	
    // C Instruction  1 1 1 a c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3
    // d1: A register ; d2: D register ; d3: RAM[A]


    //Using op code to determine the type of instruction: A or C
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=inARegister);

    //Juding whether to load A register, D register, or to write in memory using d bits
    And(a=instruction[5], b=instruction[15], out=loadARegisterCinstructions);
    Mux(a=true, b=loadARegisterCinstructions, sel=instruction[15], out=loadARegister);
    And(a=instruction[4], b=instruction[15], out=loadDRegister);
    And(a=instruction[3], b=instruction[15], out=writeM);
    
    ARegister(in=inARegister, load=loadARegister, out=outARegister,out[0..14]=addressM);
    DRegister(in=outALU, load=loadDRegister, out=outDRegister);
    
    ALU(x=outDRegister, y=outMux16ALU, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, zr=zr, ng=ng, out=outM);

    Mux16(a=outARegister, b=inM, sel=instruction[12], out=outMux16ALU);

    PC(in=outARegister, load=loadPCF, inc=true, reset=reset, out[0..14]=pc);

    //Making Boolean variables for Effect
    //if out>0
    Not(in=zr, out=notZr);
    Not(in=ng, out=notNg);
    And(a=notZr, b=notNg, out=cJGT);
    //if out=0
    And(a=zr,b=true,out=cJEQ);
    //if out>=0
    Not(in=ng, out=cJGE);
    //If out<0
    And(a=ng,b=true,out=cJLT);
    //If out!=0
    Not(in=zr, out=cJNE);
    //If out<=0
    Or(a=zr,b=ng,out=cJLE);

    //Mux8
    Mux(a=false, b=cJGT, sel=instruction[0], out=m0down);
    Mux(a=cJEQ, b=cJGE, sel=instruction[0], out=m0middown);
    Mux(a=cJLT, b=cJNE, sel=instruction[0], out=m0midup);
    Mux(a=cJLE, b=true, sel=instruction[0], out=m0up);
    Mux(a=m0down, b=m0middown, sel=instruction[1], out=m1down);
    Mux(a=m0midup, b=m0up, sel=instruction[1], out=m1up);
    Mux(a=m1down, b=m1up, sel=instruction[2], out=loadPC);

    And(a=loadPC, b=instruction[15], out=loadPCF);
    
}